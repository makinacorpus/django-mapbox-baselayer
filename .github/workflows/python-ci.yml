name: CI

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types:
      - created
  schedule:
    - cron: '0 2 * * *'

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.6  # check pylint with minimal supported python version

      - name: Install flake8
        run: |
          python -m pip install flake8 -U

      - name: Lint with flake8
        run: |
          flake8 mapbox_baselayer test_mapbox_baselayer


  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.6', '3.9', '3.10' ]
        django-version: [ '2.2.*', '3.2.*', '4.1.*' ]
        exclude:
          - python-version: '3.10'  # 3.10 is not supported by django 2.2
            django-version: '2.2.*'
          - python-version: '3.9'  # no need to test with 3.9, already tested with 3.6 and 3.10
            django-version: '3.2.*'
          - python-version: '3.6'
            django-version: '4.1.*'  # Django 4.1 supports only python >= 3.8

    steps:
    - uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install gettext

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install .[dev]
        pip install Django==${{ matrix.django-version }} -U

    - name: Check pending migrations
      run: |
        ./manage.py makemigrations --check

    - name: Test with coverage
      run: |
        coverage run ./manage.py test -v3
        coverage report -m

    - name: Coverage upload
      run: |
        pip install codecov
        codecov

  publish:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' && github.event.action == 'created' }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install setuptools wheel twine -U
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload dist/*
